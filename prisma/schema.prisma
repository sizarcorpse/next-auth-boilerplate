generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  roleId        String?
  Role          Role?     @relation(fields: [roleId], references: [roleId])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([username])
  @@index([username, roleId])
}

model Role {
  roleId      String       @id @default(uuid())
  name        String       @unique
  permissions Permission[] @relation("RoleToPermission")
  users       User[]
}

model Permission {
  permissionId String @id @default(uuid())
  name         String @unique
  roles        Role[] @relation("RoleToPermission")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NOT_SELECTED
}

enum Pronouns {
  HE_HIM
  SHE_HER
  THEY_THEM
  DONT_SPECIFY
  OTHER
}

model Profile {
  profileId   String    @id @default(uuid())
  userId      String    @unique
  designation String?   @default("")
  company     String?   @default("")
  website     String?   @default("")
  location    String?   @default("")
  publicEmail String?   @default("")
  publicPhone String?   @default("")
  gender      Gender?   @default(NOT_SELECTED)
  pronouns    Pronouns? @default(DONT_SPECIFY)
  headline    String?   @default("")
  biography   Json?     @default("{}") @db.Json
  dateOfBirth DateTime? @default(now()) @db.Date
  linkedin    String?   @default("")
  github      String?   @default("")
  twitter     String?   @default("")
  facebook    String?   @default("")
  instagram   String?   @default("")
  discord     String?   @default("")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([profileId, userId])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
